import matplotlib.pyplot as plt
import matplotlib.tri as mtri
import mec6616
import numpy as np

def varInit(divX,divY):
    global xx,yy,tri,are,cenTri,MTri1,fig1,ax1,bcdata,k
    
    divx = 25                          # Nombre de divisions en x
    divy = 25                          # Nombre de divisions en y
    n_node = (divx+1)*(divy+1);        # Nombre total de noeuds
    
    xmin = 0;                          # Limite inférieure du domaine en x
    xmax = 0.02;                       # Limite supérieure du domaine en x
    ymin = 0;                          # Limite inférieure du domaine en y
    ymax = 0.01;                       # Limite supérieure du domaine en y
    
    k = 0.5
#    q = 1000000;
    
    xx,yy,tri,are = mec6616.RectMesh(xmin,xmax,ymin,ymax,divx,divy)
    MTri1 = mtri.Triangulation(xx, yy,tri)
    
    fig1, ax1 = plt.subplots()
    ax1.set_aspect('equal')
    ax1.triplot(MTri1, 'k.-', lw=1)
    ax1.set_title('Triangulation Delaunay du domaine')
    ax1.set_adjustable("datalim")
    ax1.set_xlim(xmin - 0.1*(xmax-xmin), xmax + 0.1*(xmax-xmin))
    #ax2.set_ylim(1e-1, 1e3)
    
    #   annoter les noeuds
    for i in range (0,xx.size):
        plt.annotate(str(i),(xx[i],yy[i]))
    #   annoter les triangles
    for i in range (0,tri.shape[0]):
        xc = (xx[tri[i,0]]+xx[tri[i,1]]+xx[tri[i,2]])/3.0
        yc = (yy[tri[i,0]]+yy[tri[i,1]]+yy[tri[i,2]])/3.0    
        plt.annotate(str(i),(xc,yc))    
    plt.show()
    
    #--------------------------------------------------------#
    #                   Conditions limites                   #
    #--------------------------------------------------------#
    
    bcdata = (['Dirichlet',100],['Neumann',0],['Dirichlet',200],['Neumann',0]